# 'CI/CD' will be a workflow name in GitHub
name: CI/CD

# workflow trigger (a new GitHub branch that starts from "release*" is created)
on:
  create:
    branches:
      - "release*"

# this is for 'Login to Azure' step
permissions:
  id-token: write
  contents: read


# all jobs in one workflow run in parallel by default
# but
# if wee need job 'B' runs after successful job 'A' => add needs: A to job B
jobs:
  build:
    name: CI
    runs-on: ubuntu-latest

    steps:
      # pulling down the repo (code)
      - name: Checkout the Repository
        uses: actions/checkout@v4

      - name: Set up .Net Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0

      # 'dotnet test' will discover and run all the tests in the repository
      # 'dotnet test' will implicitly trigger 'dotnet build' with the same configuration
      # --configuration Release
      - name: Build and Run Tests
        run: dotnet test --configuration Release

      - name: Publish
        run: |
          dotnet publish \
            GitHubActionsDotNet.Api/GitHubActionsDotNet.Api.csproj \
            --configuration Release \
            -o artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
            # this will be 'app-artifact.zip'
            name: app-artifact
            # this folder is the one used in 'Publish' step (-o artifacts)
            # but
            # this folder and the one from 'Download artifact' step - are different
            # as jobs DO NOT SHARE file system while running
            path: artifacts/


  # this job will start automatically once 'CI' job is finished (needs: build)
  deploy-dev:
    name: CD (deploy to dev)
    # this will guarantee that 'deploy-dev' job will run AFTER 'build' job
    needs: build
    # using a reusable step-deploy.yml
    uses: ./.github/workflows/step-deploy.yml
    # passing params to step-deploy.yml
    with:
      env: dev
      resource_group_name: rg-github-actions-demo-dev
    # this will map GitHab env secrets from step-deploy.yml on each particular deployment step
    # using 'env' values accordingly
    secrets: inherit



  # this job is behind a manual approve restriction from GitHub (manual approve is needed)
  deploy-qa:
    name: CD (deploy to qa)
    # this will guarantee that 'deploy-qa' job will run AFTER 'deploy-dev' job
    needs: deploy-dev
    uses: ./.github/workflows/step-deploy.yml
    with:
      env: qa
      resource_group_name: rg-github-actions-demo-qa
    # this will map GitHab env secrets on each particular deployment step
    # based on the 'env' value
    secrets: inherit